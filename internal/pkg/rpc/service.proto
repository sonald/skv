syntax = "proto3";
package rpc;

option go_package = "github.com/sonald/skv/rpc";

service SKV {
  rpc Get(GetRequest) returns (GetReply) {}
  rpc Del(DelRequest) returns (DelReply) {}
  rpc Put(KeyValuePair) returns (PutReply) {}
  rpc Scan(ScanOption) returns (stream KeyValuePair) {}
  rpc GetMeta(GetMetaRequest) returns (GetMetaReply) {}
}

message GetRequest {
  string key = 1;
}

message GetReply {
  bytes value = 1;
}

message PutReply {
  int32 error = 1;
}

message DelRequest {
  string key = 1;
}

message DelReply {
  int32 error = 1;
}

message ScanOption {
  int32 limits = 1;
  string prefix = 2;
}

message KeyValuePair {
  string key = 1;
  bytes value = 2;
}

message GetMetaRequest {
  string condition = 1;
}

message GetMetaReply { 
  message Server {
    string address = 1;
    string serverID = 2;
    bool leader = 3;
    string state = 4;
  }
  repeated Server servers = 1;
}

service Peer {
  rpc Join(PeerRequest) returns (PeerReply) {}
  rpc  Quit(PeerRequest) returns (PeerReply) {}
}

message PeerRequest {
  string serverID = 1;
  string address = 2;
  uint64 prevIndex = 3;
}

message PeerReply {
}
